     1                                  ; Author name: Julian Coronado
     2                                  ; Program title: Arrays
     3                                  ; Files in this program: driver.cpp, control.asm, square.cpp, display.c, compute_mean.asm, run.sh
     4                                  ; Course number: CPSC 240
     5                                  ; Assignment number: 3
     6                                  ; Required delivery date: Mar 7, 2019 before 11:59pm
     7                                  ; Purpose: Learn how arrays work and pass them through different files.
     8                                  ; Language of this module:  X86 with Intel syntax
     9                                  
    10                                  ; ===== BEGIN CODE AREA ====================================================================================================================================================
    11                                  
    12                                  extern printf                                               ; External C++ function for writing to standard output device
    13                                  extern scanf                                                ; External C++ function for reading from the standard input device
    14                                  extern display
    15                                  global control                                              ; This makes "control" callable by functions outside of this file.
    16                                  
    17                                  ; ===== INITIALIZED DATA ===================================================================================================================================================
    18                                  
    19                                  segment .data                                               ; Place initialized data here
    20                                  
    21 00000000 456E74657220616E20-     prompt db "Enter an integer: ", 0
    21 00000009 696E74656765723A20-
    21 00000012 00                 
    22 00000013 5B636F6E74726F6C20-     cntrld db "[control + d]", 10, 0
    22 0000001C 2B20645D0A00       
    23                                  
    24 00000022 257300                  stringformat db "%s", 0                                     ; General string format
    25 00000025 256C6400                inputformat db "%ld", 0                                     ; General integer format
    26                                  
    27                                  ; ===== UNINITIALIZED DATA =================================================================================================================================================
    28                                  
    29                                  segment .bss                                                ; Place un-initialized data here.
    30                                  
    31 00000000 <res 000000A0>          arr resq 20
    32                                  
    33                                  ; ===== EXECUTABLE INSTRUCTIONS ============================================================================================================================================
    34                                  
    35                                  segment .text                                               ; Place executable instructions in this segment.
    36                                  
    37                                  control:                                                    ; Entry point. Execution begins here.
    38                                  
    39                                  ; ===== BACK UP REGISTERS ==================================================================================================================================================
    40                                  
    41 00000000 55                      push       rbp                                              ; Save a copy of the stack base pointer
    42 00000001 4889E5                  mov        rbp, rsp                                         ; We do this in order to be 100% compatible with C and C++.
    43 00000004 53                      push       rbx                                              ; Back up rbx
    44 00000005 51                      push       rcx                                              ; Back up rcx
    45 00000006 52                      push       rdx                                              ; Back up rdx
    46 00000007 56                      push       rsi                                              ; Back up rsi
    47 00000008 57                      push       rdi                                              ; Back up rdi
    48 00000009 4150                    push       r8                                               ; Back up r8
    49 0000000B 4151                    push       r9                                               ; Back up r9
    50 0000000D 4152                    push       r10                                              ; Back up r10
    51 0000000F 4153                    push       r11                                              ; Back up r11
    52 00000011 4154                    push       r12                                              ; Back up r12
    53 00000013 4155                    push       r13                                              ; Back up r13
    54 00000015 4156                    push       r14                                              ; Back up r14
    55 00000017 4157                    push       r15                                              ; Back up r15
    56 00000019 9C                      pushf                                                       ; Back up rflags
    57                                  
    58                                  ; ===== END OF BACK UP REGISTERS ===========================================================================================================================================
    59                                  
    60 0000001A 41BD00000000            mov r13, 0
    61 00000020 49BE-                   mov r14, arr
    61 00000022 [0000000000000000] 
    62                                  
    63                                  loop:
    64 0000002A 4983FD14                    cmp r13, 20
    65 0000002E 7D43                        jge done
    66                                  
    67 00000030 B800000000                  mov rax, 0
    68 00000035 48BF-                       mov rdi, stringformat
    68 00000037 [2200000000000000] 
    69 0000003F 48BE-                       mov rsi, prompt
    69 00000041 [0000000000000000] 
    70 00000049 E8(00000000)                call printf
    71                                  
    72 0000004E B800000000                  mov rax, 0
    73 00000053 48BF-                       mov rdi, inputformat
    73 00000055 [2500000000000000] 
    74 0000005D 4C89F6                      mov rsi, r14
    75 00000060 E8(00000000)                call scanf
    76                                  
    77 00000065 83F8FF                      cmp eax, -1
    78 00000068 7409                        je done
    79                                  
    80 0000006A 49FFC5                      inc r13
    81 0000006D 4983C608                    add r14, 8
    82 00000071 EBB7                        jmp loop
    83                                  
    84                                  done:
    85                                  
    86 00000073 B800000000                  mov rax, 0
    87 00000078 48BF-                       mov rdi, stringformat
    87 0000007A [2200000000000000] 
    88 00000082 48BE-                       mov rsi, cntrld
    88 00000084 [1300000000000000] 
    89 0000008C E8(00000000)                call printf
    90                                  
    91 00000091 4C89F7                      mov rdi, r14
    92 00000094 498B7500                    mov rsi, [r13]
    93 00000098 E8(00000000)                call display
    94                                  
    95                                  ; ===== RESTORES REGISTERS =================================================================================================================================================
    96                                  
    97 0000009D 9D                      popf                                                        ; Restore rflags
    98 0000009E 415F                    pop        r15                                              ; Restore r15
    99 000000A0 415E                    pop        r14                                              ; Restore r14
   100 000000A2 415D                    pop        r13                                              ; Restore r13
   101 000000A4 415C                    pop        r12                                              ; Restore r12
   102 000000A6 415B                    pop        r11                                              ; Restore r11
   103 000000A8 415A                    pop        r10                                              ; Restore r10
   104 000000AA 4159                    pop        r9                                               ; Restore r9
   105 000000AC 4158                    pop        r8                                               ; Restore r8
   106 000000AE 5F                      pop        rdi                                              ; Restore rdi
   107 000000AF 5E                      pop        rsi                                              ; Restore rsi
   108 000000B0 5A                      pop        rdx                                              ; Restore rdx
   109 000000B1 59                      pop        rcx                                              ; Restore rcx
   110 000000B2 5B                      pop        rbx                                              ; Restore rbx
   111 000000B3 5D                      pop        rbp                                              ; Restore rbp
   112                                  
   113 000000B4 C3                      ret                                                         ; No parameter with this instruction.  This instruction will pop 8 bytes from
   114                                                                                              ; the integer stack, and jump to the address found on the stack.
   115                                  ; ===== END OF PROGRAM ====================================================================================================================================================
