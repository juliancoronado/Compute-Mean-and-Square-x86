     1                                  ; Author name: Julian Coronado
     2                                  ; Program title: Arrays
     3                                  ; Files in this program: driver.cpp, control.asm, square.cpp, display.c, compute_mean.asm, run.sh
     4                                  ; Course number: CPSC 240
     5                                  ; Assignment number: 3
     6                                  ; Required delivery date: Mar 7, 2019 before 11:59pm
     7                                  ; Purpose: Learn how arrays work and pass them through different files.
     8                                  ; Language of this module:  X86 with Intel syntax
     9                                  
    10                                  ; ===== BEGIN CODE AREA ====================================================================================================================================================
    11                                  
    12                                  extern printf                                               ; External C++ function for writing to standard output device
    13                                  extern scanf                                                ; External C++ function for reading from the standard input device
    14                                  extern display
    15                                  global control                                              ; This makes "control" callable by functions outside of this file.
    16                                  
    17                                  ; ===== INITIALIZED DATA ===================================================================================================================================================
    18                                  
    19                                  segment .data                                               ; Place initialized data here
    20                                  
    21 00000000 456E74657220616E20-     prompt db "Enter an integer: ", 0
    21 00000009 696E74656765723A20-
    21 00000012 00                 
    22 00000013 5B636F6E74726F6C20-     cntrld db "[control + d]", 10, 0
    22 0000001C 2B20645D0A00       
    23                                  
    24 00000022 257300                  stringformat db "%s", 0                                     ; General string format
    25 00000025 256C6400                inputformat db "%ld", 0                                     ; General integer format
    26                                  
    27                                  ; ===== UNINITIALIZED DATA =================================================================================================================================================
    28                                  
    29                                  segment .bss                                                ; Place un-initialized data here.
    30                                  
    31                                  ; array will hold 20 spaces, as default
    32 00000000 <res 000000A0>          arr resq 20
    33                                  
    34                                  ; ===== EXECUTABLE INSTRUCTIONS ============================================================================================================================================
    35                                  
    36                                  segment .text                                               ; Place executable instructions in this segment.
    37                                  
    38                                  control:                                                    ; Entry point. Execution begins here.
    39                                  
    40                                  ; ===== BACK UP REGISTERS ==================================================================================================================================================
    41                                  
    42 00000000 55                      push       rbp                                              ; Save a copy of the stack base pointer
    43 00000001 4889E5                  mov        rbp, rsp                                         ; We do this in order to be 100% compatible with C and C++.
    44 00000004 53                      push       rbx                                              ; Back up rbx
    45 00000005 51                      push       rcx                                              ; Back up rcx
    46 00000006 52                      push       rdx                                              ; Back up rdx
    47 00000007 56                      push       rsi                                              ; Back up rsi
    48 00000008 57                      push       rdi                                              ; Back up rdi
    49 00000009 4150                    push       r8                                               ; Back up r8
    50 0000000B 4151                    push       r9                                               ; Back up r9
    51 0000000D 4152                    push       r10                                              ; Back up r10
    52 0000000F 4153                    push       r11                                              ; Back up r11
    53 00000011 4154                    push       r12                                              ; Back up r12
    54 00000013 4155                    push       r13                                              ; Back up r13
    55 00000015 4156                    push       r14                                              ; Back up r14
    56 00000017 4157                    push       r15                                              ; Back up r15
    57 00000019 9C                      pushf                                                       ; Back up rflags
    58                                  
    59                                  ; ===== END OF BACK UP REGISTERS ===========================================================================================================================================
    60                                  
    61                                  ; r13 register is the counter
    62 0000001A 41BD00000000            mov r13, 0
    63                                  ; r14 register will hold the array address
    64 00000020 49BE-                   mov r14, arr
    64 00000022 [0000000000000000] 
    65                                  
    66                                  loop:
    67                                      ; compares counter to number 20
    68                                      ; if r13 is greater or equal to 20, it'll jump to done
    69                                      ; if not continue below
    70 0000002A 4983FD14                    cmp r13, 20
    71 0000002E 7D43                        jge done
    72                                  
    73                                      ; prints out prompt for user to enter integer
    74 00000030 B800000000                  mov rax, 0
    75 00000035 48BF-                       mov rdi, stringformat
    75 00000037 [2200000000000000] 
    76 0000003F 48BE-                       mov rsi, prompt
    76 00000041 [0000000000000000] 
    77 00000049 E8(00000000)                call printf
    78                                  
    79                                      ; scans in user input and stores it into r14
    80 0000004E B800000000                  mov rax, 0
    81 00000053 48BF-                       mov rdi, inputformat
    81 00000055 [2500000000000000] 
    82 0000005D 4C89F6                      mov rsi, r14
    83 00000060 E8(00000000)                call scanf
    84                                  
    85                                      ; checks if user has entered cntrl d, if so jump to done
    86 00000065 83F8FF                      cmp eax, -1
    87 00000068 7409                        je done
    88                                  
    89                                      ; increases counter and moves array up an address
    90 0000006A 49FFC5                      inc r13
    91 0000006D 4983C608                    add r14, 8
    92 00000071 EBB7                        jmp loop
    93                                  
    94                                  done:
    95                                  
    96                                      ; prints out [cntrl+d] to indicate user have entered that keypress
    97 00000073 B800000000                  mov rax, 0
    98 00000078 48BF-                       mov rdi, stringformat
    98 0000007A [2200000000000000] 
    99 00000082 48BE-                       mov rsi, cntrld
    99 00000084 [1300000000000000] 
   100 0000008C E8(00000000)                call printf
   101                                  
   102                                      ; moves arr into rdi for function call
   103                                      ; moves r13 (counter / size) into rsi for function call
   104 00000091 48BF-                       mov rdi, arr
   104 00000093 [0000000000000000] 
   105 0000009B 4C89EE                      mov rsi, r13
   106 0000009E E8(00000000)                call display
   107                                  
   108 000000A3 B800000000                  mov rax, 0
   109                                  
   110                                  ; ===== RESTORES REGISTERS =================================================================================================================================================
   111                                  
   112 000000A8 9D                      popf                                                        ; Restore rflags
   113 000000A9 415F                    pop        r15                                              ; Restore r15
   114 000000AB 415E                    pop        r14                                              ; Restore r14
   115 000000AD 415D                    pop        r13                                              ; Restore r13
   116 000000AF 415C                    pop        r12                                              ; Restore r12
   117 000000B1 415B                    pop        r11                                              ; Restore r11
   118 000000B3 415A                    pop        r10                                              ; Restore r10
   119 000000B5 4159                    pop        r9                                               ; Restore r9
   120 000000B7 4158                    pop        r8                                               ; Restore r8
   121 000000B9 5F                      pop        rdi                                              ; Restore rdi
   122 000000BA 5E                      pop        rsi                                              ; Restore rsi
   123 000000BB 5A                      pop        rdx                                              ; Restore rdx
   124 000000BC 59                      pop        rcx                                              ; Restore rcx
   125 000000BD 5B                      pop        rbx                                              ; Restore rbx
   126 000000BE 5D                      pop        rbp                                              ; Restore rbp
   127                                  
   128 000000BF C3                      ret                                                         ; No parameter with this instruction.  This instruction will pop 8 bytes from
   129                                                                                              ; the integer stack, and jump to the address found on the stack.
   130                                  ; ===== END OF PROGRAM ====================================================================================================================================================
