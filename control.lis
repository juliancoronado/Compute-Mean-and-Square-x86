     1                                  ; Author name: Julian Coronado
     2                                  ; Program title: Arrays
     3                                  ; Files in this program: driver.cpp, control.asm, square.cpp, display.c, compute_mean.asm, run.sh
     4                                  ; Course number: CPSC 240
     5                                  ; Assignment number: 3
     6                                  ; Required delivery date: Mar 7, 2019 before 11:59pm
     7                                  ; Purpose: Learn how arrays work and pass them through different files.
     8                                  ; Language of this module:  X86 with Intel syntax
     9                                  
    10                                  ; ===== BEGIN CODE AREA ====================================================================================================================================================
    11                                  
    12                                  extern printf                                               ; External C++ function for writing to standard output device
    13                                  extern scanf                                                ; External C++ function for reading from the standard input device
    14                                  extern display
    15                                  global control                                              ; This makes "control" callable by functions outside of this file.
    16                                  extern square
    17                                  extern compute_mean
    18                                  
    19                                  ; ===== INITIALIZED DATA ===================================================================================================================================================
    20                                  
    21                                  segment .data                                               ; Place initialized data here
    22                                  
    23 00000000 456E74657220616E20-     prompt db "Enter an integer: ", 0
    23 00000009 696E74656765723A20-
    23 00000012 00                 
    24 00000013 5B636F6E74726F6C20-     cntrld db "[control + d]", 10, 0
    24 0000001C 2B20645D0A00       
    25 00000022 2D2D2D0A00              emptyline db "---", 10, 0
    26                                  
    27 00000027 257300                  stringformat db "%s", 0                                     ; General string format
    28 0000002A 256C6400                inputformat db "%ld", 0                                     ; General integer format
    29                                  
    30                                  ; ===== UNINITIALIZED DATA =================================================================================================================================================
    31                                  
    32                                  segment .bss                                                ; Place un-initialized data here.
    33                                  
    34                                  ; array will hold 20 spaces, as default
    35 00000000 <res 000000A0>          arr resq 20
    36                                  
    37                                  ; ===== EXECUTABLE INSTRUCTIONS ============================================================================================================================================
    38                                  
    39                                  segment .text                                               ; Place executable instructions in this segment.
    40                                  
    41                                  control:                                                    ; Entry point. Execution begins here.
    42                                  
    43                                  ; ===== BACK UP REGISTERS ==================================================================================================================================================
    44                                  
    45 00000000 55                      push       rbp                                              ; Save a copy of the stack base pointer
    46 00000001 4889E5                  mov        rbp, rsp                                         ; We do this in order to be 100% compatible with C and C++.
    47 00000004 53                      push       rbx                                              ; Back up rbx
    48 00000005 51                      push       rcx                                              ; Back up rcx
    49 00000006 52                      push       rdx                                              ; Back up rdx
    50 00000007 56                      push       rsi                                              ; Back up rsi
    51 00000008 57                      push       rdi                                              ; Back up rdi
    52 00000009 4150                    push       r8                                               ; Back up r8
    53 0000000B 4151                    push       r9                                               ; Back up r9
    54 0000000D 4152                    push       r10                                              ; Back up r10
    55 0000000F 4153                    push       r11                                              ; Back up r11
    56 00000011 4154                    push       r12                                              ; Back up r12
    57 00000013 4155                    push       r13                                              ; Back up r13
    58 00000015 4156                    push       r14                                              ; Back up r14
    59 00000017 4157                    push       r15                                              ; Back up r15
    60 00000019 9C                      pushf                                                       ; Back up rflags
    61                                  
    62                                  ; ===== END OF BACK UP REGISTERS ===========================================================================================================================================
    63                                  
    64                                  ; r13 register is the counter
    65 0000001A 41BD00000000            mov r13, 0
    66                                  ; r14 register will hold the array address
    67 00000020 49BE-                   mov r14, arr
    67 00000022 [0000000000000000] 
    68                                  
    69                                  loop:
    70                                      ; compares counter to number 20
    71                                      ; if r13 is greater or equal to 20, it'll jump to done
    72                                      ; if not continue below
    73 0000002A 4983FD14                    cmp r13, 20
    74 0000002E 7D43                        jge done
    75                                  
    76                                      ; prints out prompt for user to enter integer
    77 00000030 B800000000                  mov rax, 0
    78 00000035 48BF-                       mov rdi, stringformat
    78 00000037 [2700000000000000] 
    79 0000003F 48BE-                       mov rsi, prompt
    79 00000041 [0000000000000000] 
    80 00000049 E8(00000000)                call printf
    81                                  
    82                                      ; scans in user input and stores it into r14
    83 0000004E B800000000                  mov rax, 0
    84 00000053 48BF-                       mov rdi, inputformat
    84 00000055 [2A00000000000000] 
    85 0000005D 4C89F6                      mov rsi, r14
    86 00000060 E8(00000000)                call scanf
    87                                  
    88                                      ; checks if user has entered cntrl d, if so jump to done
    89 00000065 83F8FF                      cmp eax, -1
    90 00000068 7409                        je done
    91                                  
    92                                      ; increases counter and moves array up an address
    93 0000006A 49FFC5                      inc r13
    94 0000006D 4983C608                    add r14, 8
    95 00000071 EBB7                        jmp loop
    96                                  
    97                                  done:
    98                                  
    99                                      ; prints out [cntrl+d] to indicate user have entered that key combo
   100 00000073 B800000000                  mov rax, 0
   101 00000078 48BF-                       mov rdi, stringformat
   101 0000007A [2700000000000000] 
   102 00000082 48BE-                       mov rsi, cntrld
   102 00000084 [1300000000000000] 
   103 0000008C E8(00000000)                call printf
   104                                  
   105                                      ; moves arr into rdi for function call
   106                                      ; moves r13 (counter / size) into rsi for function call
   107 00000091 48BF-                       mov rdi, arr
   107 00000093 [0000000000000000] 
   108 0000009B 4C89EE                      mov rsi, r13
   109 0000009E E8(00000000)                call display
   110                                  
   111                                      ; function display will put data in rax, this clears it
   112 000000A3 B800000000                  mov rax, 0
   113                                  
   114 000000A8 48BF-                       mov rdi, stringformat
   114 000000AA [2700000000000000] 
   115 000000B2 48BE-                       mov rsi, emptyline
   115 000000B4 [2200000000000000] 
   116 000000BC E8(00000000)                call printf
   117                                  
   118 000000C1 48BF-                       mov rdi, arr
   118 000000C3 [0000000000000000] 
   119 000000CB 4C89EE                      mov rsi, r13
   120 000000CE E8(00000000)                call compute_mean
   121                                  
   122 000000D3 48BF-                       mov rdi, arr
   122 000000D5 [0000000000000000] 
   123 000000DD 4C89EE                      mov rsi, r13
   124 000000E0 E8(00000000)                call square
   125                                  
   126 000000E5 48BF-                       mov rdi, stringformat
   126 000000E7 [2700000000000000] 
   127 000000EF 48BE-                       mov rsi, emptyline
   127 000000F1 [2200000000000000] 
   128 000000F9 E8(00000000)                call printf
   129                                  
   130 000000FE 48BF-                       mov rdi, arr
   130 00000100 [0000000000000000] 
   131 00000108 4C89EE                      mov rsi, r13
   132 0000010B E8(00000000)                call display
   133                                  
   134 00000110 48BF-                       mov rdi, stringformat
   134 00000112 [2700000000000000] 
   135 0000011A 48BE-                       mov rsi, emptyline
   135 0000011C [2200000000000000] 
   136 00000124 E8(00000000)                call printf
   137                                  
   138 00000129 B800000000                  mov rax, 0
   139                                  
   140                                  ; ===== RESTORES REGISTERS =================================================================================================================================================
   141                                  
   142 0000012E 9D                      popf                                                        ; Restore rflags
   143 0000012F 415F                    pop        r15                                              ; Restore r15
   144 00000131 415E                    pop        r14                                              ; Restore r14
   145 00000133 415D                    pop        r13                                              ; Restore r13
   146 00000135 415C                    pop        r12                                              ; Restore r12
   147 00000137 415B                    pop        r11                                              ; Restore r11
   148 00000139 415A                    pop        r10                                              ; Restore r10
   149 0000013B 4159                    pop        r9                                               ; Restore r9
   150 0000013D 4158                    pop        r8                                               ; Restore r8
   151 0000013F 5F                      pop        rdi                                              ; Restore rdi
   152 00000140 5E                      pop        rsi                                              ; Restore rsi
   153 00000141 5A                      pop        rdx                                              ; Restore rdx
   154 00000142 59                      pop        rcx                                              ; Restore rcx
   155 00000143 5B                      pop        rbx                                              ; Restore rbx
   156 00000144 5D                      pop        rbp                                              ; Restore rbp
   157                                  
   158 00000145 C3                      ret                                                         ; No parameter with this instruction.  This instruction will pop 8 bytes from
   159                                                                                              ; the integer stack, and jump to the address found on the stack.
   160                                  ; ===== END OF PROGRAM ====================================================================================================================================================
