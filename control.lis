     1                                  ; Author name: Julian Coronado
     2                                  ; Program title: Arrays
     3                                  ; Files in this program: driver.cpp, control.asm, square.cpp, display.c, compute_mean.asm, run.sh
     4                                  ; Course number: CPSC 240
     5                                  ; Assignment number: 3
     6                                  ; Required delivery date: Mar 7, 2019 before 11:59pm
     7                                  ; Purpose: Learn how arrays work and pass them through different files.
     8                                  ; Language of this module:  X86 with Intel syntax
     9                                  
    10                                  ; ===== BEGIN CODE AREA ====================================================================================================================================================
    11                                  
    12                                  extern printf                                               ; External C++ function for writing to standard output device
    13                                  extern scanf                                                ; External C++ function for reading from the standard input device
    14                                  extern display
    15                                  global control                                              ; This makes "control" callable by functions outside of this file.
    16                                  extern square
    17                                  extern compute_mean
    18                                  
    19                                  ; ===== INITIALIZED DATA ===================================================================================================================================================
    20                                  
    21                                  segment .data                                               ; Place initialized data here
    22                                  
    23 00000000 456E74657220616E20-     prompt db "Enter an integer: ", 0
    23 00000009 696E74656765723A20-
    23 00000012 00                 
    24 00000013 5B636F6E74726F6C20-     cntrld db "[control + d]", 10, 0
    24 0000001C 2B20645D0A00       
    25 00000022 2D202D202D0A00          emptyline db "- - -", 10, 0
    26                                  
    27 00000029 257300                  stringformat db "%s", 0                                     ; General string format
    28 0000002C 256C6400                inputformat db "%ld", 0                                     ; General integer format
    29 00000030 546865206D65616E20-     floatformat db "The mean of those numbers is %lf", 10, 0
    29 00000039 6F662074686F736520-
    29 00000042 6E756D626572732069-
    29 0000004B 7320256C660A00     
    30                                  
    31                                  ; ===== UNINITIALIZED DATA =================================================================================================================================================
    32                                  
    33                                  segment .bss                                                ; Place un-initialized data here.
    34                                  
    35                                  ; array will hold 20 spaces, as default
    36 00000000 <res 000000A0>          arr resq 20
    37                                  
    38                                  ; ===== EXECUTABLE INSTRUCTIONS ============================================================================================================================================
    39                                  
    40                                  segment .text                                               ; Place executable instructions in this segment.
    41                                  
    42                                  control:                                                    ; Entry point. Execution begins here.
    43                                  
    44                                  ; ===== BACK UP REGISTERS ==================================================================================================================================================
    45                                  
    46 00000000 55                      push       rbp                                              ; Save a copy of the stack base pointer
    47 00000001 4889E5                  mov        rbp, rsp                                         ; We do this in order to be 100% compatible with C and C++.
    48 00000004 53                      push       rbx                                              ; Back up rbx
    49 00000005 51                      push       rcx                                              ; Back up rcx
    50 00000006 52                      push       rdx                                              ; Back up rdx
    51 00000007 56                      push       rsi                                              ; Back up rsi
    52 00000008 57                      push       rdi                                              ; Back up rdi
    53 00000009 4150                    push       r8                                               ; Back up r8
    54 0000000B 4151                    push       r9                                               ; Back up r9
    55 0000000D 4152                    push       r10                                              ; Back up r10
    56 0000000F 4153                    push       r11                                              ; Back up r11
    57 00000011 4154                    push       r12                                              ; Back up r12
    58 00000013 4155                    push       r13                                              ; Back up r13
    59 00000015 4156                    push       r14                                              ; Back up r14
    60 00000017 4157                    push       r15                                              ; Back up r15
    61 00000019 9C                      pushf                                                       ; Back up rflags
    62                                  
    63                                  ; ===== END OF BACK UP REGISTERS ===========================================================================================================================================
    64                                  
    65                                  ; r13 register is the counter
    66 0000001A 41BD00000000            mov r13, 0
    67                                  ; r14 register will hold the array address
    68 00000020 49BE-                   mov r14, arr
    68 00000022 [0000000000000000] 
    69                                  
    70                                  loop:
    71                                      ; compares counter to number 20
    72                                      ; if r13 is greater or equal to 20, it'll jump to done
    73                                      ; if not continue below
    74 0000002A 4983FD14                    cmp r13, 20
    75 0000002E 7D43                        jge done
    76                                  
    77                                      ; prints out prompt for user to enter integer
    78 00000030 B800000000                  mov rax, 0
    79 00000035 48BF-                       mov rdi, stringformat
    79 00000037 [2900000000000000] 
    80 0000003F 48BE-                       mov rsi, prompt
    80 00000041 [0000000000000000] 
    81 00000049 E8(00000000)                call printf
    82                                  
    83                                      ; scans in user input and stores it into r14
    84 0000004E B800000000                  mov rax, 0
    85 00000053 48BF-                       mov rdi, inputformat
    85 00000055 [2C00000000000000] 
    86 0000005D 4C89F6                      mov rsi, r14
    87 00000060 E8(00000000)                call scanf
    88                                  
    89                                      ; checks if user has entered cntrl d, if so jump to done
    90 00000065 83F8FF                      cmp eax, -1
    91 00000068 7409                        je done
    92                                  
    93                                      ; increases counter and moves array up an address
    94 0000006A 49FFC5                      inc r13
    95 0000006D 4983C608                    add r14, 8
    96 00000071 EBB7                        jmp loop
    97                                  
    98                                  done:
    99                                  
   100                                      ; prints out [cntrl+d] to indicate user have entered that key combo
   101 00000073 B800000000                  mov rax, 0
   102 00000078 48BF-                       mov rdi, stringformat
   102 0000007A [2900000000000000] 
   103 00000082 48BE-                       mov rsi, cntrld
   103 00000084 [1300000000000000] 
   104 0000008C E8(00000000)                call printf
   105                                  
   106                                      ; moves arr into rdi for function call, displays array
   107                                      ; moves r13 (counter / size) into rsi for function call
   108 00000091 48BF-                       mov rdi, arr
   108 00000093 [0000000000000000] 
   109 0000009B 4C89EE                      mov rsi, r13
   110 0000009E E8(00000000)                call display
   111                                  
   112                                      ; prints "---"
   113 000000A3 B800000000                  mov rax, 0
   114 000000A8 48BF-                       mov rdi, stringformat
   114 000000AA [2900000000000000] 
   115 000000B2 48BE-                       mov rsi, emptyline
   115 000000B4 [2200000000000000] 
   116 000000BC E8(00000000)                call printf
   117                                  
   118                                      ; calls compute_mean
   119 000000C1 48BF-                       mov rdi, arr
   119 000000C3 [0000000000000000] 
   120 000000CB 4C89EE                      mov rsi, r13
   121 000000CE E8(00000000)                call compute_mean
   122                                  
   123 000000D3 F2440F10F8                  movsd xmm15, xmm0
   124                                  
   125 000000D8 B801000000                  mov rax, 1
   126 000000DD 48BF-                       mov rdi, floatformat
   126 000000DF [3000000000000000] 
   127                                      ; assembler knows that xmm0 is going to be used
   128 000000E7 E8(00000000)                call printf
   129                                  
   130                                      ; squares all numbers in array
   131 000000EC 48BF-                       mov rdi, arr
   131 000000EE [0000000000000000] 
   132 000000F6 4C89EE                      mov rsi, r13
   133 000000F9 E8(00000000)                call square
   134                                  
   135                                      ; prints "---"
   136 000000FE 48BF-                       mov rdi, stringformat
   136 00000100 [2900000000000000] 
   137 00000108 48BE-                       mov rsi, emptyline
   137 0000010A [2200000000000000] 
   138 00000112 E8(00000000)                call printf
   139                                  
   140                                      ; displays array again
   141 00000117 48BF-                       mov rdi, arr
   141 00000119 [0000000000000000] 
   142 00000121 4C89EE                      mov rsi, r13
   143 00000124 E8(00000000)                call display
   144                                  
   145 00000129 B800000000                  mov rax, 0
   146 0000012E 48BF-                       mov rdi, stringformat
   146 00000130 [2900000000000000] 
   147 00000138 48BE-                       mov rsi, emptyline
   147 0000013A [2200000000000000] 
   148 00000142 E8(00000000)                call printf
   149                                  
   150 00000147 F2410F10C7                  movsd xmm0, xmm15
   151                                  
   152                                  ; ===== RESTORES REGISTERS =================================================================================================================================================
   153                                  
   154 0000014C 9D                      popf                                                        ; Restore rflags
   155 0000014D 415F                    pop        r15                                              ; Restore r15
   156 0000014F 415E                    pop        r14                                              ; Restore r14
   157 00000151 415D                    pop        r13                                              ; Restore r13
   158 00000153 415C                    pop        r12                                              ; Restore r12
   159 00000155 415B                    pop        r11                                              ; Restore r11
   160 00000157 415A                    pop        r10                                              ; Restore r10
   161 00000159 4159                    pop        r9                                               ; Restore r9
   162 0000015B 4158                    pop        r8                                               ; Restore r8
   163 0000015D 5F                      pop        rdi                                              ; Restore rdi
   164 0000015E 5E                      pop        rsi                                              ; Restore rsi
   165 0000015F 5A                      pop        rdx                                              ; Restore rdx
   166 00000160 59                      pop        rcx                                              ; Restore rcx
   167 00000161 5B                      pop        rbx                                              ; Restore rbx
   168 00000162 5D                      pop        rbp                                              ; Restore rbp
   169                                  
   170 00000163 C3                      ret                                                         ; No parameter with this instruction.  This instruction will pop 8 bytes from
   171                                                                                              ; the integer stack, and jump to the address found on the stack.
   172                                  ; ===== END OF PROGRAM ====================================================================================================================================================
